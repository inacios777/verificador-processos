"""
üìå Fun√ß√£o deste arquivo:
Fornecer uma interface gr√°fica em Streamlit para intera√ß√£o com a API do verificador de processos.
Permite enviar JSONs de entrada, escolher o formato de sa√≠da e visualizar a decis√£o de forma amig√°vel.

------------------------------------------------------------------------------------------------------------------------
Principais responsabilidades:

Configura√ß√£o da interface:
‚û° Define t√≠tulo, √≠cone ‚öñÔ∏è e layout wide.
‚û° Permite ao usu√°rio informar a URL da API (padr√£o: http://127.0.0.1:8000).
‚û° Op√ß√£o de sa√≠da: texto formatado (/analisar) ou JSON (/analisar_json).
‚û° Se JSON, h√° op√ß√£o de exibir no formato ‚Äúpretty‚Äù (estilo do desafio).

Entrada de dados:
‚û° Duas abas para envio:
üìã Colar JSON diretamente em uma √°rea de texto.
üìÅ Enviar arquivo .json via upload.
‚û° Fun√ß√£o _carregar_payload unifica a leitura do JSON de entrada.

Envio para a API:
‚û° Bot√£o ‚ÄúüöÄ Enviar para API‚Äù dispara requisi√ß√£o POST.
‚û° Mede tempo de resposta (ms) e exibe status HTTP.
‚û° Permite visualizar o payload enviado.

Exibi√ß√£o da resposta:
‚û° Se resposta for texto (PlainText), mostra como c√≥digo formatado.
‚û° Se resposta for JSON:
Exibe com st.json.

Para um √∫nico processo: destaca resultado, cita√ß√µes e justificativa em m√©tricas e texto.
Para lista de processos: mostra cada processo em expander/card com resumo e JSON completo.

Tratamento de erros:
‚û° Lida com erros comuns: JSON inv√°lido, falhas na requisi√ß√£o, exce√ß√µes gen√©ricas.
‚û° Mensagens de erro exibidas no painel do Streamlit.

"""

import json
import time
import os
from typing import Any, Union, List, Dict

import requests
import streamlit as st

# =========================
# Config
# =========================
DEFAULT_API = os.getenv("API_URL", "http://127.0.0.1:8000")
st.set_page_config(page_title="Verificador de Processos", page_icon="‚öñÔ∏è", layout="wide")

st.title("Verificador de Processos ‚öñÔ∏è")
st.caption("Envie um JSON (√∫nico processo ou lista) e veja a decis√£o/justificativa.")

api_base = st.text_input("URL da API", value=DEFAULT_API, help="Ex.: http://127.0.0.1:8000")
saida = st.radio("Formato de sa√≠da", ["Texto formatado (/analisar)", "JSON (/analisar_json)"], horizontal=True)
endpoint = "/analisar" if saida.startswith("Texto") else "/analisar_json"

if endpoint == "/analisar_json":
    pretty = st.toggle("Exibir no formato de texto do desafio (pretty=true)", value=False)
else:
    pretty = False

# =========================
# Entrada: colar JSON ou enviar arquivo
# =========================
tab1, tab2 = st.tabs(["üìã Colar JSON", "üìÅ Enviar arquivo .json"])

with tab1:
  body_text = st.text_area(
    "Cole aqui o JSON",
    height=300,
    placeholder=(
      "√önico processo: objeto { ... } contendo os campos principais do processo.\n"
      "M√∫ltiplos processos: lista [ { ... }, { ... }, ... ] com cada processo no mesmo formato."
    )
  )

with tab2:
    up = st.file_uploader("Selecione um arquivo .json", type=["json"])

def _carregar_payload() -> Union[Dict[str, Any], List[Dict[str, Any]]]:
    if up is not None:
        return json.load(up)
    if body_text.strip():
        return json.loads(body_text)
    raise ValueError("Forne√ßa o JSON colando no campo de texto ou enviando um arquivo.")

colA, colB = st.columns([1, 2])
with colA:
    enviar = st.button("üöÄ Enviar para API", type="primary")
with colB:
    mostrar_req = st.checkbox("Mostrar payload enviado", value=False)

# =========================
# Envio
# =========================
if enviar:
    try:
        payload = _carregar_payload()
        url = f"{api_base}{endpoint}"
        if pretty:
            url += "?pretty=true"

        t0 = time.time()
        resp = requests.post(url, json=payload, timeout=60)
        dt = (time.time() - t0) * 1000

        st.success(f"Status {resp.status_code} ‚Ä¢ {dt:.0f} ms ‚Ä¢ Endpoint: {url}")

        if mostrar_req:
            st.subheader("Request body")
            st.code(json.dumps(payload, ensure_ascii=False, indent=2), language="json")

        # Resposta texto (PlainText)
        if resp.headers.get("content-type", "").startswith("text/plain"):
            st.subheader("Resposta (texto formatado)")
            st.code(resp.text, language="json")
        else:
            # Resposta JSON
            data = resp.json()
            st.subheader("Resposta (JSON)")
            st.json(data)

            # Se for √∫nico processo, exibir destaque de decis√£o
            if isinstance(data, dict):
                st.markdown("### Resumo")
                c1, c2 = st.columns(2)
                with c1:
                    st.metric("Resultado", str(data.get("resultado", "?")))
                with c2:
                    st.write("**Cita√ß√µes:**", data.get("citacoes", []))
                st.write("**Justificativa:**")
                st.write(data.get("justificativa", ""))

            # Se for lista, mostrar cards simples
            if isinstance(data, list):
                st.markdown("### Resumo (lista)")
                for i, item in enumerate(data, start=1):
                    with st.expander(f"Processo {i} ‚Ä¢ {item.get('numeroProcesso', '')}"):
                        st.write(f"**Resultado:** {item.get('resultado')}")
                        st.write(f"**Cita√ß√µes:** {item.get('citacoes')}")
                        st.write("**Justificativa:**")
                        st.write(item.get("justificativa", ""))
                        st.code(json.dumps(item, ensure_ascii=False, indent=2), language="json")

    except json.JSONDecodeError as e:
        st.error(f"JSON inv√°lido: {e}")
    except requests.RequestException as e:
        st.error(f"Erro ao chamar API: {e}")
    except Exception as e:
        st.error(f"Erro: {e}")
