"""

üìå Fun√ß√£o deste arquivo:
Definir a API FastAPI que exp√µe os endpoints do verificador de processos.
Permite enviar um ou v√°rios processos para an√°lise e obter como resposta tanto texto formatado quanto JSON estruturado.

------------------------------------------------------------------------------------------------------------------------
Principais responsabilidades:

Configura√ß√£o da API:
‚û° Instancia um app FastAPI com t√≠tulo "Verificador de Processos".

Endpoint /analisar (texto leg√≠vel):
‚û° Entrada: um √∫nico processo (dict) ou uma lista de processos.
‚û° Para cada processo, chama analisar_processo.
‚û° Retorna sa√≠da em texto formatado, usando formatar_resultados.
‚û° Resposta com PlainTextResponse para facilitar visualiza√ß√£o em testes.

Endpoint /analisar_json (contratual):
‚û° Entrada: igual ao /analisar (um ou v√°rios processos).
‚û° Retorna sa√≠da em JSON estruturado, pronto para consumo em integra√ß√µes.

Endpoint /health:
‚û° Retorna {"status": "ok"}.
‚û° Usado para monitoramento e checagem de disponibilidade do servi√ßo.

Tratamento de erros:
‚û° Em ambos os endpoints principais, captura exce√ß√µes e retorna HTTP 400 com detalhe do erro.

"""

from fastapi import FastAPI, HTTPException
from fastapi.responses import PlainTextResponse
from typing import Union, List, Dict

from app.decisao import analisar_processo
from app.formatador import formatar_resultados

app = FastAPI(title="Verificador de Processos")

@app.post("/analisar", response_class=PlainTextResponse)
def analisar_endpoint(json_entrada: Union[Dict, List[Dict]]):
    """Retorna TEXTO formatado (leg√≠vel)."""
    try:
        if isinstance(json_entrada, dict):
            resultados = [analisar_processo(json_entrada)]
        else:
            resultados = [analisar_processo(proc) for proc in json_entrada]
        return formatar_resultados(resultados)
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/analisar_json")
def analisar_json(json_entrada: Union[Dict, List[Dict]]):
    """Retorna JSON estruturado (contratual)."""
    try:
        if isinstance(json_entrada, dict):
            return analisar_processo(json_entrada)
        return [analisar_processo(proc) for proc in json_entrada]
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.get("/health")
def health():
    return {"status": "ok"}
