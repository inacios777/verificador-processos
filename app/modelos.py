"""

üìå Fun√ß√£o deste arquivo:

Definir todas as estruturas de dados que o sistema manipula, utilizando Pydantic para valida√ß√£o e tipagem.
Organiza desde a entrada bruta dos processos, at√© a vers√£o normalizada e a resposta final estruturada.

------------------------------------------------------------------------------------------------------------------------
Tr√™s blocos principais:

Estrutura Base (entrada bruta):
‚û° Representa os processos judiciais exatamente como recebidos do tribunal.
‚û° Inclui documentos e movimentos originais, al√©m de dados como valores, classe e √≥rg√£o julgador.
‚û° Serve como ponto de partida para o pr√©-processamento.

Estrutura M√≠nima (normalizada):
‚û° Vers√£o simplificada e organizada para an√°lise de regras.
‚û° Converte documentos em dicion√°rios, padroniza campos e aplica valida√ß√µes (ex.: impedir valores negativos em condena√ß√£o).
‚û° Sa√≠da do pr√©-processador, pronta para uso pelas pol√≠ticas de decis√£o.

Sa√≠da do Verificador (decis√£o final):
‚û° Modelo de resposta que a API/LLM deve retornar.
‚û° Cont√©m o resultado (approved / rejected / incomplete), a justificativa textual e cita√ß√µes das regras aplicadas.
‚û° Estrutura compat√≠vel com o case final de decis√£o.

"""

from datetime import datetime
from typing import List, Optional, Dict
from enum import Enum
from pydantic import BaseModel, Field, ConfigDict, field_validator


# -------------------------------------------------------------------
# ENUM para resultado (compat√≠vel com o case)
# -------------------------------------------------------------------
class ResultadoEnum(str, Enum):
    approved = "approved"
    rejected = "rejected"
    incomplete = "incomplete"


# -------------------------------------------------------------------
# Estrutura Base (entrada bruta)
# -------------------------------------------------------------------
class Documento(BaseModel):
    id: str
    data_hora_juntada: datetime = Field(alias="dataHoraJuntada")
    nome: str
    texto: str

    model_config = ConfigDict(populate_by_name=True)


class Movimento(BaseModel):
    data_hora: datetime = Field(alias="dataHora")
    descricao: str

    model_config = ConfigDict(populate_by_name=True)


class ProcessoBase(BaseModel):
    numero_processo: str = Field(alias="numeroProcesso")
    classe: str
    orgao_julgador: str = Field(alias="orgaoJulgador")
    ultima_distribuicao: datetime = Field(alias="ultimaDistribuicao")
    assunto: str
    valor_causa: Optional[float] = Field(default=None, alias="valorCausa")
    valor_condenacao: Optional[float] = Field(default=None, alias="valorCondenacao")
    segredo_justica: bool = Field(alias="segredoJustica")
    justica_gratuita: bool = Field(alias="justicaGratuita")
    sigla_tribunal: str = Field(alias="siglaTribunal")
    esfera: str
    documentos: List[Documento]
    movimentos: List[Movimento]
    honorarios: Optional[Dict[str, float]] = None

    model_config = ConfigDict(populate_by_name=True)


# -------------------------------------------------------------------
# Estrutura M√≠nima (normalizada)
# -------------------------------------------------------------------
class ProcessoMinimo(BaseModel):
    numero_processo: str = Field(alias="numeroProcesso")
    classe: str
    orgao_julgador: str = Field(alias="orgaoJulgador")
    ultima_distribuicao: datetime = Field(alias="ultimaDistribuicao")
    valor_causa: Optional[float] = Field(default=None, alias="valorCausa")
    assunto: str
    segredo_justica: bool = Field(alias="segredoJustica")
    justica_gratuita: bool = Field(alias="justicaGratuita")
    sigla_tribunal: str = Field(alias="siglaTribunal")
    esfera: str
    valor_condenacao: Optional[float] = Field(default=None, alias="valorCondenacao")
    documentos: Dict[str, Dict]
    honorarios: Optional[Dict[str, float]] = None

    model_config = ConfigDict(populate_by_name=True)

    @field_validator("valor_condenacao")
    def check_valor_condenacao(cls, v):
        if v is not None and v < 0:
            raise ValueError("O valor da condena√ß√£o n√£o pode ser negativo.")
        return v


# -------------------------------------------------------------------
# Sa√≠da do verificador (decis√£o final) ‚Üí JSON compat√≠vel com o case
# -------------------------------------------------------------------
class RespostaDecisao(BaseModel):
    resultado: ResultadoEnum
    justificativa: str
    citacoes: List[str]

    model_config = ConfigDict(extra="forbid", populate_by_name=True)
